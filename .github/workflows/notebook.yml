name: Deploy to AWS SageMaker with Lifecycle

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  S3_BUCKET: order-567
  CSV_FILE: Students.csv
  NOTEBOOK_INSTANCE_NAME: testing
  LIFECYCLE_CONFIG_NAME: auto-sync-lifecycle

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      
    - name: üîê Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: üì¶ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install boto3 awscli pandas numpy matplotlib scikit-learn xgboost joblib
        
    - name: ‚úÖ Verify AWS Connection
      run: |
        echo "Testing AWS connection..."
        aws sts get-caller-identity
        
    - name: üîç Validate S3 Resources
      run: |
        echo "Checking S3 bucket and CSV file..."
        aws s3 ls s3://${{ env.S3_BUCKET }}/
        
        if aws s3 ls s3://${{ env.S3_BUCKET }}/${{ env.CSV_FILE }} > /dev/null 2>&1; then
          echo "‚úÖ CSV file found: s3://${{ env.S3_BUCKET }}/${{ env.CSV_FILE }}"
        else
          echo "‚ùå CSV file not found in S3"
          echo "Please upload ${{ env.CSV_FILE }} to s3://${{ env.S3_BUCKET }}/"
          exit 1
        fi
        
    - name: üì§ Upload Notebooks to S3
      run: |
        echo "Uploading notebook files to S3..."
        
        # Upload .ipynb files
        if find . -name "*.ipynb" -type f | head -1 | grep -q .; then
          aws s3 sync . s3://${{ env.S3_BUCKET }}/notebooks/ \
            --exclude "*" --include "*.ipynb" --delete
          echo "‚úÖ Notebook files uploaded to S3"
        else
          echo "‚ö†Ô∏è No .ipynb files found"
        fi
        
        # Upload Python scripts
        if find . -name "*.py" -type f | head -1 | grep -q .; then
          aws s3 sync . s3://${{ env.S3_BUCKET }}/scripts/ \
            --exclude "*" --include "*.py"
          echo "‚úÖ Python files uploaded to S3"
        fi

    - name: üîÑ Create/Update Lifecycle Configuration
      run: |
        echo "Creating Lifecycle Configuration..."
        
        # Create the OnStart script
        cat > on-start.sh << 'EOF'
        #!/bin/bash
        
        set -e
        
        echo "üöÄ Starting SageMaker OnStart lifecycle script..."
        
        # Wait for instance to be fully ready
        sleep 30
        
        # Set up environment
        export AWS_DEFAULT_REGION=us-east-1
        export S3_BUCKET=order-567
        export LOCAL_PATH=/home/ec2-user/SageMaker
        
        # Function to log with timestamp
        log() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
        }
        
        # Create directories
        log "üìÅ Setting up directories..."
        mkdir -p $LOCAL_PATH/notebooks
        mkdir -p $LOCAL_PATH/scripts
        mkdir -p $LOCAL_PATH/data
        
        # Install additional packages if needed
        log "üì¶ Installing additional packages..."
        /home/ec2-user/anaconda3/envs/python3/bin/pip install --upgrade \
            pandas numpy matplotlib seaborn scikit-learn xgboost joblib plotly
        
        # Sync files from S3
        log "üîÑ Syncing notebooks from S3..."
        aws s3 sync s3://$S3_BUCKET/notebooks/ $LOCAL_PATH/notebooks/ --delete || true
        
        log "üîÑ Syncing scripts from S3..."
        aws s3 sync s3://$S3_BUCKET/scripts/ $LOCAL_PATH/scripts/ || true
        
        # Download data file
        log "üìä Downloading data file..."
        aws s3 cp s3://$S3_BUCKET/Students.csv $LOCAL_PATH/data/ || true
        
        # Set proper permissions
        log "üîê Setting permissions..."
        chown -R ec2-user:ec2-user $LOCAL_PATH/
        find $LOCAL_PATH -name "*.ipynb" -exec chmod 644 {} +
        find $LOCAL_PATH -name "*.py" -exec chmod 755 {} +
        
        # Create a welcome notebook
        log "üìù Creating welcome notebook..."
        cat > $LOCAL_PATH/00-Welcome.ipynb << 'WELCOME_EOF'
        {
         "cells": [
          {
           "cell_type": "markdown",
           "metadata": {},
           "source": [
            "# üéâ Welcome to Your SageMaker Environment!\n",
            "\n",
            "This notebook was automatically created by the CI/CD pipeline.\n",
            "\n",
            "## üìÅ Available Resources\n",
            "\n",
            "- **Data**: `/home/ec2-user/SageMaker/data/Students.csv`\n",
            "- **Notebooks**: `/home/ec2-user/SageMaker/notebooks/`\n",
            "- **Scripts**: `/home/ec2-user/SageMaker/scripts/`\n",
            "\n",
            "## üöÄ Quick Start"
           ]
          },
          {
           "cell_type": "code",
           "execution_count": null,
           "metadata": {},
           "outputs": [],
           "source": [
            "import pandas as pd\n",
            "import numpy as np\n",
            "import matplotlib.pyplot as plt\n",
            "import seaborn as sns\n",
            "\n",
            "# Load the data\n",
            "print(\"üìä Loading Students data...\")\n",
            "try:\n",
            "    # Try local file first\n",
            "    df = pd.read_csv('/home/ec2-user/SageMaker/data/Students.csv')\n",
            "    print(f\"‚úÖ Data loaded successfully! Shape: {df.shape}\")\n",
            "except FileNotFoundError:\n",
            "    # Fallback to S3\n",
            "    print(\"üì° Loading from S3...\")\n",
            "    df = pd.read_csv('s3://order-567/Students.csv')\n",
            "    print(f\"‚úÖ Data loaded from S3! Shape: {df.shape}\")\n",
            "\n",
            "# Display basic info\n",
            "print(\"\\nüìã Dataset Info:\")\n",
            "print(df.info())\n",
            "print(\"\\nüîç First 5 rows:\")\n",
            "df.head()"
           ]
          }
         ],
         "metadata": {
          "kernelspec": {
           "display_name": "Python 3",
           "language": "python",
           "name": "python3"
          },
          "language_info": {
           "name": "python",
           "version": "3.9.16"
          }
         },
         "nbformat": 4,
         "nbformat_minor": 4
        }
        WELCOME_EOF
        
        chown ec2-user:ec2-user $LOCAL_PATH/00-Welcome.ipynb
        
        # Create sync utility script
        log "üîß Creating sync utility..."
        cat > $LOCAL_PATH/sync-from-s3.py << 'SYNC_EOF'
        #!/usr/bin/env python3
        import subprocess
        import os
        from datetime import datetime
        
        def sync_files():
            """Sync latest files from S3"""
            print(f"üîÑ Syncing files at {datetime.now()}")
            
            commands = [
                ['aws', 's3', 'sync', 's3://order-567/notebooks/', '/home/ec2-user/SageMaker/notebooks/', '--delete'],
                ['aws', 's3', 'sync', 's3://order-567/scripts/', '/home/ec2-user/SageMaker/scripts/'],
                ['aws', 's3', 'cp', 's3://order-567/Students.csv', '/home/ec2-user/SageMaker/data/']
            ]
            
            for cmd in commands:
                try:
                    result = subprocess.run(cmd, capture_output=True, text=True)
                    if result.returncode == 0:
                        print(f"‚úÖ {' '.join(cmd[:3])} successful")
                    else:
                        print(f"‚ö†Ô∏è {' '.join(cmd[:3])} warning: {result.stderr}")
                except Exception as e:
                    print(f"‚ùå Error with {' '.join(cmd[:3])}: {e}")
            
            print("üéâ Sync completed!")
        
        if __name__ == "__main__":
            sync_files()
        SYNC_EOF
        
        chmod +x $LOCAL_PATH/sync-from-s3.py
        chown ec2-user:ec2-user $LOCAL_PATH/sync-from-s3.py
        
        log "‚úÖ Lifecycle script completed successfully!"
        log "üéØ Files synced to: $LOCAL_PATH"
        log "üìù Welcome notebook created: $LOCAL_PATH/00-Welcome.ipynb"
        
        EOF
        
        # Encode the script in base64
        ENCODED_SCRIPT=$(base64 -w 0 on-start.sh)
        
        # Check if lifecycle config exists
        if aws sagemaker describe-notebook-instance-lifecycle-config \
           --notebook-instance-lifecycle-config-name ${{ env.LIFECYCLE_CONFIG_NAME }} > /dev/null 2>&1; then
          echo "üîÑ Updating existing lifecycle configuration..."
          aws sagemaker update-notebook-instance-lifecycle-config \
            --notebook-instance-lifecycle-config-name ${{ env.LIFECYCLE_CONFIG_NAME }} \
            --on-start Content="$ENCODED_SCRIPT"
        else
          echo "üÜï Creating new lifecycle configuration..."
          aws sagemaker create-notebook-instance-lifecycle-config \
            --notebook-instance-lifecycle-config-name ${{ env.LIFECYCLE_CONFIG_NAME }} \
            --on-start Content="$ENCODED_SCRIPT"
        fi
        
        echo "‚úÖ Lifecycle configuration ready!"
        
    - name: üñ•Ô∏è Manage SageMaker Instance
      run: |
        echo "Managing SageMaker notebook instance..."
        
        # Get current status
        INSTANCE_STATUS=$(aws sagemaker describe-notebook-instance \
          --notebook-instance-name ${{ env.NOTEBOOK_INSTANCE_NAME }} \
          --query 'NotebookInstanceStatus' --output text 2>/dev/null || echo "NotFound")
        
        echo "Current status: $INSTANCE_STATUS"
        
        case $INSTANCE_STATUS in
          "NotFound")
            echo "‚ùå Notebook instance '${{ env.NOTEBOOK_INSTANCE_NAME }}' not found"
            echo "‚ÑπÔ∏è Creating new instance with lifecycle configuration..."
            
            aws sagemaker create-notebook-instance \
              --notebook-instance-name ${{ env.NOTEBOOK_INSTANCE_NAME }} \
              --instance-type ml.t3.medium \
              --role-arn $(aws iam get-role --role-name SageMakerExecutionRole --query 'Role.Arn' --output text) \
              --lifecycle-config-name ${{ env.LIFECYCLE_CONFIG_NAME }}
            
            echo "‚úÖ Instance creation started with lifecycle config"
            ;;
          "Stopped")
            echo "üîÑ Starting stopped instance..."
            aws sagemaker start-notebook-instance \
              --notebook-instance-name ${{ env.NOTEBOOK_INSTANCE_NAME }}
            echo "‚úÖ Start command sent for stopped instance"
            ;;
          "InService")
            echo "‚úÖ Instance is already running"
            echo "üîÑ Restarting to apply latest lifecycle configuration..."
            
            # Stop the instance first
            aws sagemaker stop-notebook-instance \
              --notebook-instance-name ${{ env.NOTEBOOK_INSTANCE_NAME }}
            echo "üõë Stop command sent"
            
            # Wait for it to stop
            echo "‚è≥ Waiting for instance to stop..."
            for i in {1..10}; do
              STATUS=$(aws sagemaker describe-notebook-instance \
                --notebook-instance-name ${{ env.NOTEBOOK_INSTANCE_NAME }} \
                --query 'NotebookInstanceStatus' --output text)
              
              if [ "$STATUS" = "Stopped" ]; then
                echo "‚úÖ Instance stopped successfully"
                break
              else
                echo "‚è≥ Stopping... Status: $STATUS (attempt $i/10)"
                sleep 30
              fi
            done
            
            # Update lifecycle config and start
            echo "üîÑ Updating lifecycle configuration..."
            aws sagemaker update-notebook-instance \
              --notebook-instance-name ${{ env.NOTEBOOK_INSTANCE_NAME }} \
              --lifecycle-config-name ${{ env.LIFECYCLE_CONFIG_NAME }}
            
            echo "üöÄ Starting instance with updated lifecycle config..."
            aws sagemaker start-notebook-instance \
              --notebook-instance-name ${{ env.NOTEBOOK_INSTANCE_NAME }}
            echo "‚úÖ Restart command sent"
            ;;
          "Stopping"|"Starting"|"Updating")
            echo "‚è≥ Instance is in transition state: $INSTANCE_STATUS"
            echo "‚è≥ Waiting for stable state..."
            sleep 60
            
            # Check again after waiting
            NEW_STATUS=$(aws sagemaker describe-notebook-instance \
              --notebook-instance-name ${{ env.NOTEBOOK_INSTANCE_NAME }} \
              --query 'NotebookInstanceStatus' --output text)
            
            if [ "$NEW_STATUS" = "Stopped" ]; then
              echo "üöÄ Starting instance..."
              aws sagemaker start-notebook-instance \
                --notebook-instance-name ${{ env.NOTEBOOK_INSTANCE_NAME }}
              echo "‚úÖ Start command sent after waiting"
            elif [ "$NEW_STATUS" = "InService" ]; then
              echo "‚úÖ Instance is now running"
            else
              echo "‚ö†Ô∏è Instance still in transition: $NEW_STATUS"
            fi
            ;;
          *)
            echo "‚ö†Ô∏è Unexpected instance status: $INSTANCE_STATUS"
            echo "üîÑ Attempting to start anyway..."
            aws sagemaker start-notebook-instance \
              --notebook-instance-name ${{ env.NOTEBOOK_INSTANCE_NAME }} || true
            ;;
        esac
        
    - name: ‚è≥ Wait for Instance Ready
      run: |
        echo "Waiting for notebook instance to be ready..."
        
        for i in {1..20}; do
          STATUS=$(aws sagemaker describe-notebook-instance \
            --notebook-instance-name ${{ env.NOTEBOOK_INSTANCE_NAME }} \
            --query 'NotebookInstanceStatus' --output text)
          
          if [ "$STATUS" = "InService" ]; then
            echo "‚úÖ Instance is ready!"
            break
          else
            echo "‚è≥ Waiting... Status: $STATUS (attempt $i/20)"
            sleep 45
          fi
          
          if [ $i -eq 20 ]; then
            echo "‚ö†Ô∏è Timeout waiting for instance. Current status: $STATUS"
          fi
        done
        
    - name: üîó Get Access Information
      run: |
        # Get notebook URL
        NOTEBOOK_URL=$(aws sagemaker describe-notebook-instance \
          --notebook-instance-name ${{ env.NOTEBOOK_INSTANCE_NAME }} \
          --query 'Url' --output text 2>/dev/null || echo "Instance not ready")
        
        echo "üìã Deployment Information:"
        echo "üîó SageMaker URL: https://$NOTEBOOK_URL"
        echo "üìÅ S3 Bucket: s3://${{ env.S3_BUCKET }}/"
        echo "üìä Data File: s3://${{ env.S3_BUCKET }}/${{ env.CSV_FILE }}"
        echo "üìì Notebooks: s3://${{ env.S3_BUCKET }}/notebooks/"
        echo "üîÑ Lifecycle: ${{ env.LIFECYCLE_CONFIG_NAME }}"
        
    - name: üìä Create Deployment Summary
      if: always()
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        ## üéØ Deployment Results
        
        | Component | Status | Location |
        |-----------|---------|----------|
        | üìÅ S3 Bucket | ‚úÖ | order-567 |
        | üìä CSV Data | ‚úÖ | Students.csv |
        | üñ•Ô∏è SageMaker | ‚úÖ | ${{ env.NOTEBOOK_INSTANCE_NAME }} |
        | üîÑ Lifecycle Config | ‚úÖ | ${{ env.LIFECYCLE_CONFIG_NAME }} |
        | üåç Region | ‚úÖ | us-east-1 |
        
        ### üöÄ Auto-Setup Features
        
        **Lifecycle Configuration automatically:**
        - üì• Syncs all notebooks from S3
        - üìä Downloads Students.csv to `/data/` folder
        - üì¶ Installs required Python packages
        - üìù Creates a welcome notebook with quick start code
        - üîß Sets up sync utility script
        
        **Manual Sync (if needed):**
        ```bash
        # Run from SageMaker terminal
        python3 /home/ec2-user/SageMaker/sync-from-s3.py
        ```
        
        **File Locations:**
        - üìä Data: `/home/ec2-user/SageMaker/data/Students.csv`
        - üìì Notebooks: `/home/ec2-user/SageMaker/notebooks/`
        - üîß Scripts: `/home/ec2-user/SageMaker/scripts/`
        - üëã Welcome: `/home/ec2-user/SageMaker/00-Welcome.ipynb`
        
        ### üéõÔ∏è Instance Management
        ```bash
        # Start instance
        aws sagemaker start-notebook-instance --notebook-instance-name ${{ env.NOTEBOOK_INSTANCE_NAME }}
        
        # Stop instance  
        aws sagemaker stop-notebook-instance --notebook-instance-name ${{ env.NOTEBOOK_INSTANCE_NAME }}
        ```
        EOF
        
    - name: üéâ Final Status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ CI/CD Pipeline dengan Lifecycle Configuration berhasil!"
          echo "üîÑ Auto-sync akan berjalan setiap kali instance dimulai"
          echo "üîó Akses SageMaker notebook Anda sekarang"
          echo "üìä Data dan notebooks sudah siap digunakan"
        else
          echo "‚ùå Pipeline gagal - periksa logs di atas"
        fi